<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8">
		<meta http-equiv="X-UA-Compatible" content="IE=edge">
		<meta name="viewport" content="width=device-width, initial-scale=1">
		
		<!-- Bootstrap Core CSS -->
		<link href="/config/bootstrap.css" rel="stylesheet">
		<!-- nv.d3 core CSS -->
		<link href="/config/nvd3.css" rel="stylesheet" type="text/css">
		
		<link href="/config/mywiss.css" rel="stylesheet">
		<script src="/parameter.js"></script>
		<!-- jQuery Version 1.11.0 -->
		<script src="/config/jquery.js"></script>
		<!-- moment and Bootstrap Core JavaScript -->
		<script src="/config/moment.js"></script>
		<script src="/config/bootstrap.js"></script>
		<!-- d3, nvd3 and iopctrl Core JavaScript -->
		<script src="/config/d3.js"></script>
		<script src="/config/nvd3.js"></script>
		<script src="/config/iopctrl.js"></script>
		<!-- In house Core JavaScript -->
		<script src="/config/mywiss_common.js"></script>
		<script src="/config/di2ai2relay.js"></script>
	</head>
	<body onload='onload();'>
		<div id="wrapper" class='page-wrap'>
			<!--Navigation-->
			<nav class='navbar navbar-inverse navbar-fixed-top' role='navigation' id='titleNavbar'>
				<!--Brand and toggle get grouped for better mobile display -->
				<div class='navbar-header'>
					<button type='button' class='navbar-toggle' data-toggle='collapse' data-target='#collapseableNavbar' >
						<span class='sr-only'>Toggle navigation</span>
						<span class='icon-bar'></span>
						<span class='icon-bar'></span>
						<span class='icon-bar'></span>
					</button>
					<a class='navbar-brand ajax-home' href='/config/index.html' style='font-size:20px;'><script>document.write(module)</script></a>
				</div>
				<!--Top Menu Items-->
				<ul class='nav navbar-right top-nav' style='font-size:16px;'>
					<li class='dropdown'>
						<a class='dropdown-toggle' data-toggle='dropdown' id='userTitle'>
							<i class='fa fa-user'></i> 
							
							<b class='caret'></b>
						</a>
						<ul class='dropdown-menu'>
							<li>
								<a id='logout'><i class='fa fa-fw fa-eject'></i> Log Out</a>
							</li>
						</ul>
					</li>
				</ul>
				<!--Sidebar Menu Items - These collapse to the responsive navigation menu on small screens-->
				<div class='collapse navbar-collapse' id ='collapseableNavbar'>
					<ul class='nav navbar-nav side-nav main-menu' id ='collapseableListview' style='font-size:16px;'>
						<li>
							<a id ='dashboard' href='/config/index.html' class='ajax-home'><i class='fa fa-fw fa-info-circle'></i> Information </a>
						</li>
						<li>
							<a id ='configuration' href='/config/config.html' class='ajax-link'> <i class='fa fa-fw fa-wrench'></i> Configuration </a>
						</li>
						<li id='soltInfoListViewItem'></li>
						<li class='hasMoreType'>
							<a id ='advancedFunction' href='/config/advanced.html' class='ajax-link'><i class='fa fa-fw fa-cogs'></i>  Advanced
								<i class='fa fa-fw fa-caret-down'></i> 
							</a>
							<ul class='collapse' id="advanced">
							</ul>
						</li>

					</ul>
				</div><!--.navbar-collapse-->
			</nav>
			<!--Confirm Modal -->
			<div class="modal fade" id="CommonConfirmModal" tabindex="-1" role="dialog" aria-labelledby="confirmModalLabel" aria-hidden="true">
				<div class="modal-dialog">
					<div class="modal-content">
						<div class="modal-header">
							<button type="button" class="close" data-dismiss="modal">
								<span aria-hidden="true">&times;</span><span class="sr-only">Close</span>
							</button>
							<h4 class="modal-title" id="confirmModalLabel"></h4>
						</div>

						<div class="modal-body" id="confirmContext"></div>
						<div class="modal-footer">
							<button id="btnCommonConfirm" class="btn btn-success">
								Yes
							</button>
							<button id="btnCommonCancel" class="btn btn-danger" data-dismiss="modal">
								No
							</button>
						</div>
					</div>
				</div>
			</div>
			<div id="page-context" style='background-color:#fff; min-width:300px;'>
				<center>
					<button class="title-toggle" id="btnMenuToggle" data-target="#titleNavbar #page-context">
						<span class='fa fa-angle-double-up fa-2x' style='margin-top:10px;'></span>
					</button>
				</center>
				<div id="page-wrapper">
					<center>
						<br>
						<br>
						<br>
						<br>
						<br>
						<br>
						<br>
						<br>
						<br>
						<br>
						<h1>
							<i class="fa fa-cog fa-spin"></i> initializing...
						</h1>
						<br>
						<br>
						<br>
						<br>
						<br>
						<br>
						<br>
						<br>
						<br>
						<br>
						<br>
						<br>
						<br>
						<br>
						<br>
						<br>
						<br>
						<br>
						<br>
						<br>
						<br>
						<br>
					</center>
				</div>
				<!-- /#page-wrapper -->
			</div>
			
			
		</div>
		<!-- /#wrapper -->
		<footer class="site-footer">
			<div>
				 <hr/>
					<center style='color:#ffffff;'>
					<p class="copyright" >
						Version : 
					 	<script>document.write(Advantech.Profile.Information.Version)</script>, Copyright &copy; <script>document.write(Advantech.Profile.Information.Date)</script> By 
						<a href='http://www.advantech.com'>
							<script>
								document.write(Advantech.Profile.Information.Vender)
							</script>
					</p>
				</center>  
			</div>
		</footer>
		<script>			
			(function(){
				var $toggleBtn = $("#btnMenuToggle");
				var toggleTargets = [];
				var targetsIds = $toggleBtn.attr("data-target").split(" ");
				var dragFlag = false, basePosY, mouseStartPosY, menuEndPosY, isShow = true, MAX_MARGIN_TOP = -85;
				for(var idx = 0; idx < targetsIds.length; ++idx){
					toggleTargets.push($(targetsIds[idx]));
				}
				$toggleTargets = $(toggleTargets);
				function setDisplayStatus(displayState){
					isShow = displayState;
			    	var $span = $toggleBtn.find("span");
			    	var unlockIdx = $toggleTargets.length -1;
			    	if(displayState == true){
			    		$span.removeClass('fa-angle-double-down');
			        	$span.addClass('fa-angle-double-up');
			        	$toggleTargets.each(function(idx, obj){
		            		obj.css("margin-top", "0px")
		          		});
			    	}
			    	else{
			        	$span.addClass('fa-angle-double-down');
			        	$span.removeClass('fa-angle-double-up');
			        	$toggleTargets.each(function(idx, obj){
	          				obj.css("margin-top", MAX_MARGIN_TOP+"px");
	          			});
			        }
		    	};
		    	function checkPosition(){
				    if($(window).width() >= 765)
				    {
				       	$toggleTargets.each(function(index, obj){
				       		isShow = true;
				       		setDisplayStatus(true);
				       	});
				    }
				};
		    	$(document).load($(window).bind("resize", checkPosition));
				$toggleBtn.on({
	          	"mousedown touchstart": function(e) {
			            e.preventDefault();
			            e.stopPropagation();
			            dragFlag = true;
			            basePosY = (isShow)?0:MAX_MARGIN_TOP;
			            menuEndPosY = 0.0001;
			            mouseStartPosY = (e.pageY || e.originalEvent.touches[0].pageY);
			     },
		        "mousemove touchmove": function(e) {
		            	var difference, move;
			            if (!dragFlag) {
			            	return;
			            }
			            e.preventDefault();
			            difference = (e.pageY || e.originalEvent.touches[0].pageY) - mouseStartPosY;
			            menuEndPosY = (isShow)?(basePosY+difference):(basePosY+difference);
			            if(menuEndPosY > 0 || menuEndPosY < MAX_MARGIN_TOP){
			             	return;
			            }
				        $toggleTargets.each(function(idx, obj){
		           			obj.css("margin-top", menuEndPosY+"px");
		           		});
				},
	          	"mouseup touchend": function(e) {
	          			if (!dragFlag) {
		             	   return;
		              	}
		              	var state;
		              	e.preventDefault();
		              	dragFlag = false;
	          			if (menuEndPosY) {
	          				if(isShow){
	          					state = (menuEndPosY <= 0.0001)?!isShow:isShow;
	          				}else{
	          					state = (menuEndPosY >= MAX_MARGIN_TOP)?!isShow:isShow;
	          				}
			            }
			            setDisplayStatus(state);
			            menuEndPosY = false;
	          	 },
	          	"mouseleave": function(e) {
	          		e.preventDefault();
		            $toggleBtn.trigger("mouseup");
		         }
          	});
			})();
			
			function errorPage(){
					$("#page-wrapper").html("<center>"+
					"<br>"+
					"<br>"+
					"<br>"+
					"<br>"+
					"<br>"+
					"<br>"+
					"<br>"+
					"<br>"+
					"<br>"+
					"<br>"+
					"<h1>"+
					"<i class='fa fa-exclamation-triangle'></i> initial Failed..."+
					"</h1>"+
					"<a class='btn btn-danger' href='/config'><i class='fa fa-fw fa-home'></i>Re-login</a>"+
					"<br>"+
					"<br>"+
					"<br>"+
					"<br>"+
					"<br>"+
					"<br>"+
					"<br>"+
					"<br>"+
					"<br>"+
					"<br>"+
					"<br>"+
					"<br>"+
					"<br>"+
					"<br>"+
					"<br>"+
					"<br>"+
					"<br>"+
					"<br>"+
					"<br>"+
					"<br>"+
					"<br>"+
					"<br>"+
				"</center>");
				};
			try{
				var waitForm = Advantech.Form.WaitingForm.getInstance();
				waitForm.showPleaseWait(errorPage);
				var adamT1X0form = new Advantech.Form.MainForm.AdamT1X0form('wrapper');
				var couplerInfo = null, wlanStatus = null, networkConfig = null, slotInfo = null;
				adamT1X0form.initialEventHandle();				
				function onload() {					
					httpGetOperation(HTTP_GET, URL_GENERAL_CONFIG, callbackGetUserType, callbackServerError);	
				};

				function callbackGetUserType(jsonObj) {
					if(jsonObj.Acnt == undefined){
						Advantech.Privilege.UIManagerSingleton.getInstance(0);
					}
					else{
						Advantech.Privilege.UIManagerSingleton.getInstance(int(jsonObj.Acnt));
					}
					Advantech.Data.ModuleData.getInstance().setMode(jsonObj.WMd);//get module working mode
					Advantech.Utility.loadAjaxContent("dashboard", "/config/dashboard.html", null, onDashboardLoad);
				}

				function callbackGetProfile(jsonObj, userType) {
					adamT1X0form.initialForm(jsonObj, Advantech.Profile.AdvancedEmun.ADAMT1X0Series.getAdvancedFunctionProfile(), userType);
					if(slotInfo !== null){
						slotInfo.setSlotInfoPanel(jsonObj);
						Advantech.Utility.ProfileRecordInstance.getInstance(jsonObj);
						httpGetOperation(HTTP_GET, URL_SYS_INFO, callbackGetDashboardCouplerInfor, callbackServerError);
					}
					else{
						callbackServerError();
					}
				}
				
				function callbackServerError(code, msg) {
					waitForm.hidePleaseWait();
					Advantech.Utility.TimerDispatchSingleton.getInstance().ClearTimer();
					errorPage();
				};

				function onDashboardLoad() {
					couplerInfo = new Advantech.Form.SystemForm.CouplerInfoPanel("DashboardCouplerInformationPanel");
					couplerInfo.initialPanel(true);
					wlanStatus = new Advantech.Form.ConfigForm.WLanStatusPanel("WLanStatusPanel");
					wlanStatus.initialPanel();				
					wlanStatus.onWLanStatusRefreshed(function(obj, e){ //set refresh button event handler
						Advantech.Form.WaitingForm.getInstance().showPleaseWait();
						httpGetOperation(HTTP_GET, URL_WLAN_STATUS, callbackGetDashboardWirelessStatus, callbackServerError, JSON.stringify(e));
					});	
					networkConfig = new Advantech.Form.ConfigForm.NetworkPanel("DashboardNetworkPanel", true);
					networkConfig.initialPanel();
				    slotInfo = new Advantech.Form.SystemForm.SlotInfoPanel("DashboardSlotInformationPanel", Advantech.ConstantParamter.SlotNumber);
					slotInfo.initialPanel("DashboardContext", true);
					slotInfo.onSlotInfoSelected(function(obj, e) {
					});	
					httpGetOperation(HTTP_GET, URL_PROFILE, 
									function(stream){
										callbackGetProfile(stream, {Acnt:Advantech.Privilege.UIManagerSingleton.getInstance().getRank()});
									}, 
									callbackServerError);
				};
			 	
				function callbackGetDashboardCouplerInfor(jsonObj) {
					if(couplerInfo !== null){
						couplerInfo.setCouplerInfoPanel(jsonObj);
						httpGetOperation(HTTP_GET, URL_WLAN_CONFIG, callbackGetDashboardWirelessConfig, callbackServerError);
					}
					else{
						callbackServerError();
					}
				};
				function callbackGetDashboardWirelessConfig(jsonObj) {
					//jsonObj.DHCP = 1;//Dummy variable
					Advantech.Data.NetworkData.WlanData.getInstance().setMode(jsonObj.Md);
					/*
					httpGetOperation(HTTP_GET, URL_NETWROK,
						function(networkData){
							callbackGetDashboardNetwork(networkData,jsonObj);
						},
						callbackServerError);
					*/
					callbackGetDashboardNetwork(jsonObj);	//API change: wlan_conf now can get all network setting
				};
				function callbackGetDashboardNetwork(wlanObj) {
					if(networkConfig !== null){
						var networkParameter, title, $networkPanel = $("#"+networkConfig.getPanelId());
						networkParameter = wlanObj;
						if(wlanObj.Md == 0){ //Infrastructure mode
							//do nothing
						}
						else{ //AP mode
							networkParameter.IP = wlanObj.AIP;
							networkParameter.AGW = wlanObj.AGW;
							networkParameter.AMsk = wlanObj.AMsk;
						}						
						networkConfig.setNetworkConfig(networkParameter);
						Advantech.Utility.MacRecordInstance.getInstance(wlanObj.MAC);
						httpGetOperation(HTTP_GET, URL_WLAN_STATUS, callbackGetDashboardWirelessStatus, callbackServerError);
					}else{
						callbackServerError();
					}
				};
				function callbackGetDashboardWirelessStatus(jsonObj) {
						wlanStatus.setPanel(jsonObj);
						var profile = Advantech.Utility.ProfileRecordInstance.getInstance().getProfile();
						Advantech.Utility.dotNetUtilityCallBack(ADVANTECH_PROFILE, profile);
						waitForm.hidePleaseWait();						
				};

			}
			catch(e){
				
			}
			window.onerror = function (message, file, line, col, error) {
				var stack;
				var jsMsg = message + " on line " + line + " at " + file + "\r\n";
				if(error != undefined){
					stack = error.stack;
				}
				else{
					stack = "";
				}
				jsMsg += stack;
			    $("body").html('<div class="container-fluid">'+
                                '<div class="row">'+
                                    '<div class="col-xs-12 text-center" style="color:white;">'+
                                        '<h1>Please re-login.</h1>'+
                                        '<h2>Oops, Unknown Error</h2>'+
                                        '<h3>'+message+'.</h3>'+
                                        "<h1><i class='fa fa-exclamation-triangle fa-5x'></i></h1>"+
                                        '<a href="/config" class="btn btn-danger btn-label-left"><span><i class="fa fa-reply"></i></span> Re-login</a>'+
                                        '<h3 style="display:none;">Detail: '+jsMsg+'.</h3>'+
                                    '</div>'+
                                '</div>'+
                            '</div>');
			};
		</script>
	</body>
</html>
